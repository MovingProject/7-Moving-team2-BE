### 변수 설정 (포트가 다르면 수정하세요)
@host = http://localhost:4000

####################################################
#                  회원가입 API 테스트                  #
####################################################

### 1. 소비자(CONSUMER) 회원가입 성공 케이스 (201 Created 예상)
# 정상적인 데이터를 보냈을 때, 201 상태 코드와 함께 생성된 유저 정보(DTO)가 반환되어야 합니다.
POST {{host}}/auth/signup
Content-Type: application/json

{
  "email": "consumer7@test.com",
  "password": "password123",
  "passwordConfirm": "password123",
  "name": "김소비",
  "phoneNumber": "010-1234-5678",
  "role": "CONSUMER"
}

### 2. 기사(DRIVER) 회원가입 성공 케이스 (201 Created 예상)
# 역할(role)만 DRIVER로 변경. 프로필 정보는 나중에 따로 등록하므로 여기서는 필요 없습니다.
POST {{host}}/auth/signup
Content-Type: application/json

{
  "email": "driver1@test.com",
  "password": "password123",
  "passwordConfirm": "password123",
  "name": "박기사",
  "phoneNumber": "010-8765-4321",
  "role": "DRIVER"
}


### 3. 유효성 검사 실패 케이스 (400 Bad Request 예상) - 비밀번호 불일치
# password와 passwordConfirm이 다를 경우, ZodValidationPipe가 에러를 발생시켜야 합니다.
POST {{host}}/auth/signup
Content-Type: application/json

{
  "email": "fail@test.com",
  "password": "password123",
  "passwordConfirm": "password456",
  "name": "실패",
  "phoneNumber": "010-1111-2222",
  "role": "CONSUMER"
}


### 4. 유효성 검사 실패 케이스 (400 Bad Request 예상) - 잘못된 전화번호 형식
# phoneNumber 형식이 Zod 스키마에 정의된 정규표현식과 맞지 않을 경우 에러가 발생해야 합니다.
POST {{host}}/auth/signup
Content-Type: application/json

{
  "email": "fail2@test.com",
  "password": "password123",
  "passwordConfirm": "password123",
  "name": "실패",
  "phoneNumber": "01012345678",
  "role": "CONSUMER"
}


### 5. 이메일 중복 케이스 (409 Conflict 예상)
# 주의: 이 테스트를 하려면 먼저 1번이나 2번 테스트를 성공시킨 후, 동일한 이메일로 다시 요청해야 합니다.
POST {{host}}/auth/signup
Content-Type: application/json

{
  "email": "consumer@test.com",
  "password": "password123",
  "passwordConfirm": "password123",
  "name": "김중복",
  "phoneNumber": "010-9999-8888",
  "role": "CONSUMER"
}


####################################################
#                  로그인 API 테스트                   #
####################################################

### 0. (사전 준비) 테스트용 소비자 계정 생성
# 로그인 테스트를 위해 먼저 이 요청을 보내서 계정을 만들어주세요.
POST {{host}}/auth/signup
Content-Type: application/json

{
  "email": "login-test@test.com",
  "password": "password123",
  "passwordConfirm": "password123",
  "name": "테스터",
  "phoneNumber": "010-5555-6666",
  "role": "CONSUMER"
}

### 1. 로그인 성공 케이스 (200 OK 예상)
# 정상적인 응답 Body와 함께, 헤더에 __Host-access_token와 __Host-rt 쿠키가 설정되어야 합니다.
POST {{host}}/auth/signin
Content-Type: application/json

{
  "email": "login-test@test.com",
  "password": "password123",
  "role": "CONSUMER"
}


### 2. 실패 케이스: 비밀번호 불일치 (401 Unauthorized 예상)
POST {{host}}/auth/signin
Content-Type: application/json

{
  "email": "login-test@test.com",
  "password": "password123",
  "role": "CONSUMER"
}


### 3. 실패 케이스: 권한(역할) 불일치 (403 Forbidden 예상)
# CONSUMER 계정으로 DRIVER 로그인을 시도하는 경우입니다.
POST {{host}}/auth/signin
Content-Type: application/json

{
  "email": "login-test@test.com",
  "password": "password123",
  "role": "DRIVER"
}


### 4. 실패 케이스: 존재하지 않는 이메일 (404 Not Found 예상)
POST {{host}}/auth/signin
Content-Type: application/json

{
  "email": "no-such-user@test.com",
  "password": "password123",
  "role": "CONSUMER"
}


### 5. 실패 케이스: 유효성 검사 실패 (400 Bad Request 예상)
# Zod 스키마에 따라 email 형식이 올바르지 않은 경우입니다.
POST {{host}}/auth/signin
Content-Type: application/json

{
  "email": "invalid-email",
  "password": "password123",
  "role": "CONSUMER"
}

####################################################
#                로그아웃 API 테스트                   #
####################################################

### -------------------------------------------------
### 1. 로그인 (먼저 실행하여 쿠키를 받아야 합니다)
# @name signIn
POST {{host}}/auth/signIn
Content-Type: application/json

{
  "email": "consumer7@test.com",
  "password": "password123",
  "role": "CONSUMER"
}


### -------------------------------------------------
### 2. 로그아웃 성공 (로그인 후 실행)
# @name signOutSuccess
POST {{host}}/auth/signOut
Cookie: access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5ZTJlNGI3ZS0zYjJhLTQ1ODMtYmMxMS02Yzc4ZWMzMDgzMzYiLCJqdGkiOiIyY2I3MDQ0Ni0zOWNiLTQ3NzgtYjJhYS0wMWFjYTZmNGJlNWUiLCJyb2xlIjoiQ09OU1VNRVIiLCJpYXQiOjE3NTkzMTMwMjIsImV4cCI6MTc1OTMxMzkyMiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo0MDAwIn0.fYXY0eRcM4lvtkCfjQxVK9k8nPX9hQsjbo3MjXndP58;

### -------------------------------------------------
### 3. 로그아웃 실패 (인증되지 않은 경우)
# @name signOutFailure
POST {{host}}/auth/signOut

####################################################
#                    토큰 재발급 (REFRESH)
####################################################

### 1) 재발급 성공 (200) — 로그인 후 실행
# 쿠키로 __Host-rt 전송

POST {{host}}/auth/refresh
Cookie: __Host-rt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5ZTJlNGI3ZS0zYjJhLTQ1ODMtYmMxMS02Yzc4ZWMzMDgzMzYiLCJqdGkiOiI5MTk2MGZmNy1lMGU4LTRjZWMtOTUxMy0xN2E1ZGFjOTg3NjUiLCJpYXQiOjE3NTkwODM4ODAsImV4cCI6MTc1OTY4ODY4MH0.wn2ckETqV2s9JZOIxXAAFdZb-sef9Y0vLkOgaj03xmE;

### 2) 재발급 실패 - 쿠키 없음 (401)
POST {{host}}/auth/refresh

### 3) 재발급 실패(옵션) - 재사용 감지 / 이미 사용된 토큰 (401 예상)
# 위의 1) 재발급 성공 후, 같은 요청을 다시 보내보면 usedAt 체크에 걸릴 수 있음
POST {{host}}/auth/refresh
Cookie: __Host-rt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI5ZTJlNGI3ZS0zYjJhLTQ1ODMtYmMxMS02Yzc4ZWMzMDgzMzYiLCJqdGkiOiI5MTk2MGZmNy1lMGU4LTRjZWMtOTUxMy0xN2E1ZGFjOTg3NjUiLCJpYXQiOjE3NTkwODM4ODAsImV4cCI6MTc1OTY4ODY4MH0.wn2ckETqV2s9JZOIxXAAFdZb-sef9Y0vLkOgaj03xmE;